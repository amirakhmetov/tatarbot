import logging
import sqlite3
from aiogram import Bot, types, Dispatcher, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from config import tatar_token
from aiogram.dispatcher import FSMContext


storage = MemoryStorage()
logging.basicConfig(level=logging.INFO)
bot = Bot(token=tatar_token, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=storage)


class Info(StatesGroup):
    Name = State()
    Age = State()
    City = State()

class Keyb(StatesGroup):
    Check = State()

class Add(StatesGroup):
    Word = State()
    Conf = State()

class Learn(StatesGroup):
    Start = State()
    class Type(StatesGroup):
        class New(StatesGroup):
            Continue = State()
            Confirm = State()
        class Old(StatesGroup):
            Continue = State()
            Confirm = State()

class Del(StatesGroup):
    Confirm_del = State()

videos = InlineKeyboardMarkup()
video1 = InlineKeyboardButton(text='–ü–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ', url='https://youtu.be/SFP3sWtkO7A?si=7FRRLDkAmbCa-Djz')
video2 = InlineKeyboardButton(text='–í—Ç–æ—Ä–æ–µ –≤–∏–¥–µ–æ', url='https://youtu.be/G5ETrGr7iwE?si=JT0aVc7T4ZLFX1ZO')
video3 = InlineKeyboardButton(text='–¢—Ä–µ—Ç—å–µ –≤–∏–¥–µ–æ', url='https://youtu.be/rh4QDVOYe8k?si=BxB2hEbLGo_OFWkM')
video4 = InlineKeyboardButton(text='–ß–µ—Ç–≤—ë—Ä—Ç–æ–µ –≤–∏–¥–µ–æ', url='https://youtu.be/82i4JKZop8I?si=zG-NEK4YnnOpDGYV')
video5 = InlineKeyboardButton(text='–ü—è—Ç–æ–µ –≤–∏–¥–µ–æ', url='https://youtu.be/ucP_3RIDUSc?si=DOu3-ZvoRJAYxot3')
videos.add(video1).add(video2).add(video3).add(video4).add(video5)

websites = InlineKeyboardMarkup()
web1 = InlineKeyboardButton(text='–°–∞–ª–∞–≤–∞—Ç –∫“Ø–ø–µ—Ä–µ', url='http://salavatkupere.com/')
web2 = InlineKeyboardButton(text='–®–∞—è–Ω –¢–í', url='https://shayantv.ru/')
web3 = InlineKeyboardButton(text='–ê–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—é–∂–µ—Ç—ã', url='https://mon.tatarstan.ru/anime_tat.htm')
web4 = InlineKeyboardButton(text='–ú—É–ª—å—Ç—Ñ–∏–ª—å–º—ã –Ω–∞ —Ç–∞—Ç–∞—Ä—Å–∫–æ–º —è–∑—ã–∫–µ', url='http://mon.tatarstan.ru/rus/info.php?id=539365')
web5 = InlineKeyboardButton(text="–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ '–ë–∞–ª–∞'", url='http://balarf.ru')
websites.add(web1).add(web2).add(web3).add(web4).add(web5)

material = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
btn1 = KeyboardButton(text='–ü–æ–ª–µ–∑–Ω—ã–µ –≤–∏–¥–µ–æ')
btn2 = KeyboardButton(text='–ü–æ–ª–µ–∑–Ω—ã–µ —Å–∞–π—Ç—ã')
material.add(btn1).add(btn2)

kb_confirm = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
yes_button = KeyboardButton('–î–∞')
no_button = KeyboardButton('–ù–µ—Ç')
kb_confirm.add(yes_button).add(no_button)

kb_words = ReplyKeyboardMarkup(resize_keyboard=True)
new_btn = KeyboardButton(text='–ù–æ–≤—ã–µ')
old_btn = KeyboardButton(text='–í—ã—É—á–µ–Ω–Ω—ã–µ')
home_btn = KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
kb_words.add(new_btn).add(old_btn).add(home_btn)

def menu_kb():
    menu = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    menu_btn1 = KeyboardButton(text='–£—á–∏—Ç—å —Å–ª–æ–≤–∞')
    menu_btn2 = KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞')
    menu_btn3 = KeyboardButton(text='–ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã')
    menu.add(menu_btn1)
    menu.add(menu_btn2)
    menu.add(menu_btn3)
    return menu

back_kb = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
back_btn = KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
back_kb.add(back_btn)

@dp.message_handler(commands='start')
async def start(message:types.Message):
    id1 = message.from_user.id
    conn = sqlite3.connect('tatarlar.db')
    cursor = conn.cursor()
    cursor.execute("CREATE TABLE IF NOT EXISTS users(id INTEGER, name, age, city)")
    conn.commit()
    user = cursor.execute(f"SELECT * FROM users WHERE id = {id1}").fetchall()
    if user:
        await message.answer(
            f'–°”ô–ª–∞–º, {user[0][1]}! –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¢–µ–ª–µ–≥—Ä–∞–º –ë–æ—Ç "–ú”ô–≥" ü§ö\n–ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å –±–æ—Ç–∞ "–ú”ô–≥" —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—Å–∏—Ç–µ–ª–µ–π —Ç–∞—Ç–∞—Ä—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ üìö', reply_markup=menu_kb())
    else:
        await message.answer(
            f'–°”ô–ª–∞–º, {message.from_user.first_name}! –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¢–µ–ª–µ–≥—Ä–∞–º –ë–æ—Ç "–ú”ô–≥" ü§ö\n–ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å –±–æ—Ç–∞ "–ú”ô–≥" —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—Å–∏—Ç–µ–ª–µ–π —Ç–∞—Ç–∞—Ä—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ üìö')
        await message.answer('–î–ª—è –º–æ–µ–π –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')
        await message.answer('–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?')
        await Info.Name.set()

@dp.message_handler(text=['–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', '/createprofile'])
async def newprof(message:types.Message):
    id1 = message.from_user.id
    conn = sqlite3.connect('tatarlar.db')
    cursor = conn.cursor()
    user = cursor.execute(f"SELECT * FROM users WHERE id = {id1}").fetchall()
    if not user:
        await message.answer('–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?', reply_markup=ReplyKeyboardRemove())
        await Info.Name.set()
    else:
        await message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π, —É–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–π —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /deleteprofile –∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /createprofile", reply_markup=menu_kb())

@dp.message_handler(text=['/deleteprofile', '–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'])
async def delprof(message:types.Message):
    id1 = message.from_user.id
    conn = sqlite3.connect('tatarlar.db')
    cursor = conn.cursor()
    user = cursor.execute(f"SELECT * FROM users WHERE id = {id1}").fetchall()
    if user:
        await message.answer("–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å?", reply_markup=kb_confirm)
        await Del.Confirm_del.set()
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è, —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /createprofile", reply_markup=menu_kb())


@dp.message_handler(lambda message:message.text == "–î–∞", state=Del.Confirm_del)
async def delyes(message:types.Message):
    id1 = message.from_user.id
    conn = sqlite3.connect('tatarlar.db')
    cursor = conn.cursor()
    cursor.execute(f"DELETE FROM users WHERE id = {id1}")
    conn.commit()
    await message.answer("–í—ã —É–¥–∞–ª–∏–ª–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å", reply_markup=menu_kb())
    await Del.next()

@dp.message_handler(lambda message:message.text == "–ù–µ—Ç", state=Del.Confirm_del)
async def delyes(message:types.Message):
    await message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è", reply_markup=menu_kb())
    await Del.next()

@dp.message_handler(lambda message: message.text, state=Info.Name)
async def name(message:types.Message):
    id1 = message.from_user.id
    name = message.text
    conn = sqlite3.connect('tatarlar.db')
    cursor = conn.cursor()
    data = [id1, name, 0, 0]
    cursor.execute("INSERT OR IGNORE INTO users VALUES(?, ?, ?, ?)", data)
    conn.commit()
    await message.answer("–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç")
    await Info.Age.set()

@dp.message_handler(lambda message: message.text.isdigit(), state=Info.Age)
async def age(message:types.Message):
    id1 = message.from_user.id
    age = message.text
    conn = sqlite3.connect('tatarlar.db')
    cursor = conn.cursor()
    cursor.execute(f"UPDATE users SET age = REPLACE(age, 0, '{age}')")
    conn.commit()
    await message.answer("–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?")
    await Info.City.set()

@dp.message_handler(lambda message: message.text, state=Info.City)
async def city(message:types.Message):
    id1 = message.from_user.id
    city = message.text
    conn = sqlite3.connect('tatarlar.db')
    cursor = conn.cursor()
    cursor.execute(f"UPDATE users SET city = REPLACE(city, 0, '{city}')")
    conn.commit()
    data1 = cursor.execute(f"SELECT * FROM users WHERE id = {id1}").fetchall()
    await message.answer("–ê—Ñ”ô—Ä–∏–Ω, —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
    await message.answer(f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n<b>–ò–º—è:</b> {data1[0][1]}\n<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {data1[0][2]}\n<b>–ì–æ—Ä–æ–¥:</b> {data1[0][3]}")
    await message.answer('–í—Å—ë –≤–µ—Ä–Ω–æ?', reply_markup=kb_confirm)
    await Keyb.Check.set()


@dp.message_handler(lambda message:message.text=='–î–∞', state=Keyb.Check)
async def yes(message:types.Message):
    await message.answer('–û—Ç–ª–∏—á–Ω–æ, –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å', reply_markup=menu_kb())
    await Keyb.next()

@dp.message_handler(lambda message:message.text=='–ù–µ—Ç', state=Keyb.Check)
async def yes(message:types.Message):
    id1 = message.from_user.id
    conn = sqlite3.connect('tatarlar.db')
    cursor = conn.cursor()
    user = cursor.execute(f"DELETE FROM users WHERE id = {id1}")
    conn.commit()
    await message.answer('–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /createprofile', reply_markup=ReplyKeyboardRemove())
    await Keyb.next()

@dp.message_handler(text=['–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', '/profile'])
async def profile(message:types.Message):
    id1 = message.from_user.id
    conn = sqlite3.connect('tatarlar.db')
    cursor = conn.cursor()
    user = cursor.execute(f"SELECT * FROM users WHERE id = {id1}").fetchall()
    if not user:
        await message.answer('–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å" –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /createprofile')
    else:
        await message.answer(
            f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n<b>–ò–º—è:</b> {user[0][1]}\n<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {user[0][2]}\n<b>–ì–æ—Ä–æ–¥:</b> {user[0][3]}", reply_markup=menu_kb())

@dp.message_handler(text=['–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞', '/add'])
async def add(message:types.Message):
    conn = sqlite3.connect('words_list.db')
    cursor = conn.cursor()
    cursor.execute("CREATE TABLE IF NOT EXISTS words(id INTEGER, word, definition)")
    conn.commit()
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ/–ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å", reply_markup=ReplyKeyboardRemove())
    await Add.Word.set()

@dp.message_handler(lambda message:message.text, state=Add.Word)
async def word(message:types.Message):
    conn = sqlite3.connect('words_list.db')
    cursor = conn.cursor()
    id1 = message.from_user.id
    mess_t = message.text.split('-')
    word = mess_t[0].strip().title()
    defin = mess_t[1].strip().title()
    data = [id1, word, defin, 0]
    cursor.execute("INSERT OR IGNORE INTO words VALUES(?, ?, ?, ?)", data)
    conn.commit()
    await message.answer("–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Å–≤–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é, –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë", reply_markup=kb_confirm)
    await Add.Conf.set()

@dp.message_handler(lambda message: message.text == "–î–∞", state=Add.Conf)
async def yes(message:types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ/–ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å", reply_markup=ReplyKeyboardRemove())
    await Add.Word.set()

@dp.message_handler(lambda message: message.text == "–ù–µ—Ç", state=Add.Conf)
async def no(message:types.Message):
    await message.answer("–û–∫, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=menu_kb())
    await Add.next()

@dp.message_handler(text = ['–£—á–∏—Ç—å —Å–ª–æ–≤–∞', '/learn'])
async def learn(message:types.Message):
    global known, unknown
    id1 = message.from_user.id
    conn = sqlite3.connect('words_list.db')
    cursor = conn.cursor()
    known = cursor.execute(f"SELECT word FROM words WHERE id = {id1} AND knowledge = 1").fetchall()
    unknown = cursor.execute(f"SELECT word FROM words WHERE id = {id1} AND knowledge = 0").fetchall()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ —Å–ª–æ–≤–∞ –≤—ã –±—É–¥–µ—Ç–µ —É—á–∏—Ç—å", reply_markup=kb_words)
    await Learn.Start.set()


@dp.message_handler(text = ['–ù–æ–≤—ã–µ', '/learn_new'], state=Learn.Start)
async def start_words(message:types.Message, state=Learn.Start):
    global unknown
    # global un_words
    id1 = message.from_user.id
    conn = sqlite3.connect('words_list.db')
    cursor = conn.cursor()
    use = unknown
    words = cursor.execute(f"SELECT * FROM words WHERE id = {id1} AND knowledge = 0").fetchall()
    if use:
        use1 = unknown[0][0]
        defin = cursor.execute(f"SELECT definition FROM words WHERE id = {id1} AND word = '{use1}'").fetchone()[0]

        if words:
            ans = use1 + " - " + defin
            await message.answer(ans)
            await message.answer("–í—ã –∑–Ω–∞–µ—Ç–µ —ç—Ç–æ —Å–ª–æ–≤–æ?", reply_markup=kb_confirm)
            await Learn.Type.New.Confirm.set()
            use.remove(use[0])
        else:
            await message.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å–ª–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ /add", reply_markup=ReplyKeyboardRemove())
            await FSMContext.finish(state)
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–ª–æ–≤, –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add', reply_markup=menu_kb())
        await FSMContext.finish(state)


@dp.message_handler(text = ['–í—ã—É—á–µ–Ω–Ω—ã–µ', '/repeat'], state=Learn.Start)
async def start_words(message:types.Message, state=Learn.Start):
    global known
    id1 = message.from_user.id
    conn = sqlite3.connect('words_list.db')
    cursor = conn.cursor()
    use = known
    words = cursor.execute(f"SELECT * FROM words WHERE id = {id1} AND knowledge = 1").fetchall()
    if use:
        use1 = known[0][0]
        defin = cursor.execute(f"SELECT definition FROM words WHERE id = {id1} AND word = '{use1}' ").fetchone()[0]
        if words:
            ans = use1 + " - " + defin
            await message.answer(ans)
            await message.answer("–í—ã –∑–Ω–∞–µ—Ç–µ —ç—Ç–æ —Å–ª–æ–≤–æ?", reply_markup=kb_confirm)
            await Learn.Type.Old.Confirm.set()
            known.remove(known[0])
        else:
            await message.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å–ª–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ /add", reply_markup=ReplyKeyboardRemove())
            await FSMContext.finish(state)
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–ª–æ–≤, –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add', reply_markup=menu_kb())
        await FSMContext.finish(state)

@dp.message_handler(lambda message: message.text == '–î–∞', state=Learn.Type.New.Confirm)
async def yes(message:types.Message, state=Learn.Type.New.Confirm):
    id1 = message.from_user.id
    conn = sqlite3.connect('words_list.db')
    cursor = conn.cursor()
    w_list = cursor.execute(f"SELECT * FROM words WHERE id = {id1} AND knowledge = 0").fetchall()
    word = cursor.execute(f"SELECT * FROM words WHERE id = {id1} AND knowledge = 0").fetchone()[1]
    cursor.execute(f"UPDATE words SET knowledge = 1 WHERE id = {id1} AND word = '{word}'")
    conn.commit()
    await message.answer("–°–ª–æ–≤–æ –≤—ã—É—á–µ–Ω–æ", reply_markup=ReplyKeyboardRemove())
    if len(w_list) == 1:
        await message.answer("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –Ω–µ–≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞", reply_markup=menu_kb())
        await FSMContext.finish(state)
    else:
        await Learn.Type.New.Continue.set()
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ 1, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—á–∏—Ç—å —Å–ª–æ–≤–∞, 0 –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ', reply_markup=ReplyKeyboardRemove())


@dp.message_handler(lambda message: message.text == '–î–∞', state=Learn.Type.Old.Confirm)
async def yes(message:types.Message, state=Learn.Type.Old.Confirm):
    id1 = message.from_user.id
    conn = sqlite3.connect('words_list.db')
    cursor = conn.cursor()
    w_list = cursor.execute(f"SELECT * FROM words WHERE id = {id1} AND knowledge = 1").fetchall()
    word = cursor.execute(f"SELECT * FROM words WHERE id = {id1} AND knowledge = 1").fetchone()[1]
    cursor.execute(f"UPDATE words SET knowledge = 1 WHERE id = {id1} AND word = '{word}'")
    conn.commit()
    await message.answer("–°–ª–æ–≤–æ –≤—ã—É—á–µ–Ω–æ", reply_markup=ReplyKeyboardRemove())
    if len(w_list) == 1:
        await message.answer("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –Ω–µ–≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞", reply_markup=menu_kb())
        await FSMContext.finish(state)
    else:
        await Learn.Type.Old.Continue.set()
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ 1, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—á–∏—Ç—å —Å–ª–æ–≤–∞, 0 –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ', reply_markup=ReplyKeyboardRemove())


@dp.message_handler(lambda message:message.text == '–ù–µ—Ç', state=Learn.Type.New.Confirm)
async def no(message:types.Message, state=Learn.Type.New.Confirm):
    id1 = message.from_user.id
    conn = sqlite3.connect('words_list.db')
    cursor = conn.cursor()
    w_list = cursor.execute(f"SELECT * FROM words WHERE id = {id1} AND knowledge = 0").fetchall()
    word = cursor.execute(f"SELECT * FROM words WHERE id = {id1} AND knowledge = 0").fetchone()[1]
    cursor.execute(f"UPDATE words SET knowledge = 0 WHERE id = {id1} AND word = '{word}'")
    conn.commit()
    await message.answer("–°–ª–æ–≤–æ –æ—Å—Ç–∞–ª–æ—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏ –æ–±—É—á–µ–Ω–∏—è", reply_markup=ReplyKeyboardRemove())
    if len(w_list) == 1:
        await message.answer("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –Ω–µ–≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞", reply_markup=menu_kb())
        await FSMContext.finish(state)
    else:
        await Learn.Type.New.Continue.set()
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ 1, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—á–∏—Ç—å —Å–ª–æ–≤–∞, 0 –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ', reply_markup=ReplyKeyboardRemove())

@dp.message_handler(lambda message:message.text == '–ù–µ—Ç', state=Learn.Type.Old.Confirm)
async def no(message:types.Message, state=Learn.Type.Old.Confirm):
    id1 = message.from_user.id
    conn = sqlite3.connect('words_list.db')
    cursor = conn.cursor()
    w_list = cursor.execute(f"SELECT * FROM words WHERE id = {id1} AND knowledge = 1").fetchall()
    word = cursor.execute(f"SELECT * FROM words WHERE id = {id1} AND knowledge = 1").fetchone()[1]
    cursor.execute(f"UPDATE words SET knowledge = 0 WHERE id = {id1} AND word = '{word}'")
    conn.commit()
    await message.answer("–°–ª–æ–≤–æ –æ—Å—Ç–∞–ª–æ—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏ –æ–±—É—á–µ–Ω–∏—è", reply_markup=ReplyKeyboardRemove())
    if len(w_list) == 1:
        await message.answer("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –Ω–µ–≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞", reply_markup=menu_kb())
        await FSMContext.finish(state)
    else:
        await Learn.Type.Old.Continue.set()
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ 1, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—á–∏—Ç—å —Å–ª–æ–≤–∞, 0 –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ', reply_markup=ReplyKeyboardRemove())

@dp.message_handler(lambda message:message.text in [1, '1'], state=Learn.Type.New.Continue)
async def again(message:types.Message, state=Learn.Type.New.Continue):
    global unknown
    id1 = message.from_user.id
    conn = sqlite3.connect('words_list.db')
    cursor = conn.cursor()
    use = unknown
    words = cursor.execute(f"SELECT * FROM words WHERE id = {id1} AND knowledge = 0").fetchall()
    if use:
        use1 = unknown[0][0]
        defin = cursor.execute(f"SELECT definition FROM words WHERE id = {id1} AND word = '{use1}'").fetchone()[0]
        if words:
            ans = use1 + " - " + defin
            await message.answer(ans)
            await message.answer("–í—ã –∑–Ω–∞–µ—Ç–µ —ç—Ç–æ —Å–ª–æ–≤–æ?", reply_markup=kb_confirm)
            await Learn.Type.New.Confirm.set()
            unknown.remove(unknown[0])
        else:
            await message.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å–ª–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ /add", reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–ª–æ–≤, –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add', reply_markup=menu_kb())
        await FSMContext.finish(state)

@dp.message_handler(lambda message:message.text in [1, '1'], state=Learn.Type.Old.Continue)
async def again(message:types.Message, state=Learn.Type.Old.Continue):
    global known
    id1 = message.from_user.id
    conn = sqlite3.connect('words_list.db')
    cursor = conn.cursor()
    use = known
    words = cursor.execute(f"SELECT * FROM words WHERE id = {id1} AND knowledge = 1").fetchall()
    if use:
        use1 = known[0][0]
        defin = cursor.execute(f"SELECT definition FROM words WHERE id = {id1} AND word = '{use1}'").fetchone()[0]
        if words:
            ans = use1 + " - " + defin
            await message.answer(ans)
            await message.answer("–í—ã –∑–Ω–∞–µ—Ç–µ —ç—Ç–æ —Å–ª–æ–≤–æ?", reply_markup=kb_confirm)
            await Learn.Type.Old.Confirm.set()
            known.remove(known[0])
        else:
            await message.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å–ª–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ /add", reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–ª–æ–≤, –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add', reply_markup=menu_kb())
        await FSMContext.finish(state)

@dp.message_handler(text=['/menu', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
async def home(message:types.Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=menu_kb())

@dp.message_handler(lambda message:message.text in [0, '0'], state=Learn.Type.Old.Continue)
async def zero(message:types.Message, state=Learn.Type.Old.Continue):
    await message.answer("–û–∫, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=menu_kb())
    await FSMContext.finish(state)

@dp.message_handler(text=['/mycollection', '–ú–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è'])
async def mycol(message:types.Message):
    id1 = message.from_user.id
    conn = sqlite3.connect('words_list.db')
    cursor = conn.cursor()
    words = cursor.execute(f"SELECT word, definition FROM words WHERE id = {id1}").fetchall()
    ans = ''
    for i in words:
        ans += i[0] + ' - ' + i[1] + '\n'
    await message.answer(ans)

@dp.message_handler(text=['–ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', '/materials'])
async def materials(message:types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=material)

@dp.message_handler(text=['–ü–æ–ª–µ–∑–Ω—ã–µ –≤–∏–¥–µ–æ', '/videos'])
async def video(message:types.Message):
    await message.answer("<b>–í—ã—É—á–∏ —Ç–∞—Ç–∞—Ä—Å–∫–∏–π —è–∑—ã–∫ –∑–∞ 8 –º–∏–Ω—É—Ç // Tatar language</b>\n\n"
                         "<b>–ö–∞–∫–∏–µ —Ñ—Ä–∞–∑—ã —Ç–∞—Ç–∞—Ä—Å–∫–æ–≥–æ –Ω—É–∂–Ω–æ –≤—ã—É—á–∏—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å</b>\n\n"
                         "<b>–ö–∞–∫ –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç—å —Ç–∞—Ç–∞—Ä—Å–∫–∏–µ –∑–≤—É–∫–∏</b>\n\n"
                         "<b>–£—Ä–æ–∫–∏ —Ç–∞—Ç–∞—Ä—Å–∫–æ–≥–æ —è–∑—ã–∫–∞</b>\n\n"
                         "<b>–ê—É–¥–∏–æ–∫—É—Ä—Å '–¢–∞—Ç–∞—Ä—Å–∫–∏–π —è–∑—ã–∫ —Å –Ω—É–ª—è'</b>", reply_markup=videos)

@dp.message_handler(text=['–ü–æ–ª–µ–∑–Ω—ã–µ —Å–∞–π—Ç—ã', '/websites'])
async def sites(message:types.Message):
    await message.answer("<b>–°–∞–π—Ç –¥–µ—Ç—Å–∫–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞ '–°–∞–ª–∞–≤–∞—Ç –∫“Ø–ø–µ—Ä–µ'</b>\n\n"
                         "<b>–®–∞—è–Ω –¢–í</b>\n\n"
                         "<b>–ê–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—é–∂–µ—Ç—ã –∫ –∑–∞–Ω—è—Ç–∏—é –ø–æ –æ–±—É—á–µ–Ω–∏—é –¥–µ—Ç–µ–π —Ç–∞—Ç–∞—Ä—Å–∫–æ–º—É —è–∑—ã–∫—É</b>\n\n"
                         "<b>–ú—É–ª—å—Ç—Ñ–∏–ª—å–º—ã –Ω–∞ —Ç–∞—Ç–∞—Ä—Å–∫–æ–º —è–∑—ã–∫–µ</b>\n\n"
                         "<b>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∑–≤—É–∫–æ–≤–∞—è –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ '–ë–∞–ª–∞'</b>", reply_markup=websites)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)


